@namespace AntDesign.ProLayout
@using Microsoft.AspNetCore.Components.Routing
@inherits AntProComponentBase

<Menu Mode="Mode"
      OpenKeys="OpenKeys"
      Theme="NavTheme"
      Style="@Style"
      Accordion="@Accordion"
      Class="@ClassMapper.Class"
      OpenKeysChanged="OpenKeysChanged"
      OnMenuItemClicked="OnMenuItemClicked"
      SelectedKeys="SelectedKeys"
      SelectedKeysChanged="SelectedKeysChanged">
    @menuItemTemplate(MenuData, false)
</Menu>

@code
{
    RenderFragment title(MenuDataItem menuItem) 
    {
        if (menuItem.TitleTemplate != null)
        {
            return menuItem.TitleTemplate;
        }
        return @<span>
            @if (!string.IsNullOrEmpty(menuItem.Icon))
            {
                <Icon IconFont="@menuItem.IconFont" Type="@menuItem.Icon" Theme="IconThemeType.Outline" />
            }
            <span>@menuItem.Name</span>
            </span>
        ;
    }

    RenderFragment menuItemTemplate(IEnumerable<MenuDataItem> items, bool isChildren)
    {
        @if (items == null)
        {
            return builder => { };
        }

        return builder =>
        {

            @foreach (var menuItem in items)
            {
                if (menuItem.Children != null && !menuItem.HideChildrenInMenu)
                {
                    builder.AddContent(1,
                        @<SubMenu TitleTemplate="@title(menuItem)" Key="@menuItem.Key">
                            @menuItemTemplate(menuItem.Children, true)
                        </SubMenu>);
                }
                else if (!menuItem.HideInMenu)
                {
                    builder.AddContent(1,
                        @<MenuItem Key="@menuItem.Key" RouterLink="@menuItem.Path" RouterMatch="@menuItem.Match">
                            @title(menuItem)
                        </MenuItem>);
                }
            }
        };
    }
}