@namespace AntDesign.ProLayout
@inherits AntProComponentBase

@if (Layout == Layout.Mix && !IsMobile && SplitMenus)
{
    <TopNavHeader Mode="MenuMode.Horizontal" MenuData="@NoChildrenMenuData" NavTheme="MenuTheme.Dark" Theme="MenuTheme.Dark"
        OnMenuItemClicked="HandleMenuItemClick" Logo="Logo" SiderWidth="SiderWidth" @bind-SelectedKey="@_selectedKey" />
}
else
{
    <div class="@ClassMapper.Class" Style="@Style">
        @if (IsMobile)
        {
            <span class="@BaseClassName-logo" key="logo">
                <a>
                    @if (Logo.IsT0)
                    {
                        <img src="@Logo.AsT0" alt="@Logo.AsT0" />
                    }

                    @if (Logo.IsT1)
                    {
                        @Logo.AsT1
                    }
                </a>
            </span>

            @if (CollapsedButtonRender != null)
            {
                <span class="@BaseClassName-collapsed-button"
                    @onclick="@(async () => { await OnCollapse.InvokeAsync(!Collapsed); })">
                    @if (Collapsed)
                    {
                        <Icon Type="menu-unfold" Theme="@IconThemeType.Outline" />
                    }
                    else
                    {
                        <Icon Type="menu-fold" Theme="@IconThemeType.Outline" />
                    }
                </span>
            }
        }
        else
        {
            if (Layout == Layout.Mix)
            {
                <div class="@BaseClassName-logo" style="min-width:@(SiderWidth)px">
                    <a href="@BaseURL">
                        @if (Logo.IsT0)
                        {
                            <img src="@Logo.AsT0" alt="@Logo.AsT0" />
                        }

                        @if (Logo.IsT1)
                        {
                            @Logo.AsT1
                        }

                        @if (!Collapsed)
                        {
                            <h1>@Title</h1>
                        }
                    </a>
                </div>
            }
        }

        <div style="flex: 1">@ChildContent</div>
        @if (RightContentRender != null)
        {
            @RightContentRender
        }
    </div>
}

@code {
    private string _selectedKey;

    [Parameter]
    public string SelectedKey
    {
        get => _selectedKey;
        set
        {
            if (_selectedKey != value)
            {
                _selectedKey = value;
                SelectedKeyChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<string> SelectedKeyChanged { get; set; }
}